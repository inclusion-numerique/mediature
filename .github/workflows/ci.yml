name: Continuous Integration
on:
  push:
    branches:
      - main
      - dev
  pull_request:
env:
  APP_NAME: mediature
  NODE_OPTIONS: --max_old_space_size=4096
  NODE_VERSION: 16.15.0
  PNPM_VERSION: 7.27.1
  JEST_CACHE_FOLDER_SUFFIX: .cache/jest
  CYPRESS_CACHE_FOLDER_SUFFIX: .cache/Cypress
  PLAYWRIGHT_BROWSERS_CACHE_FOLDER_SUFFIX: .cache/ms-playwright
concurrency:
  # Prevent parallel builds of the same branch
  group: cicd-${{ github.ref }}
  cancel-in-progress: false
jobs:
  requirements:
    name: Continuous Integration
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set environment for branch
        run: |
          if [[ $GITHUB_REF_NAME == 'main' ]]; then
              echo "APP_MODE=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_NAME == 'dev' ]]; then
              echo "APP_MODE=dev" >> $GITHUB_ENV
          else
              echo "APP_MODE=test" >> $GITHUB_ENV
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Export pnpm store directory as an environment variable
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/cache@v3
        name: Setup Next.js build cache
        with:
          path: ${{ github.workspace }}/apps/main/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Install dependencies
        env:
          CYPRESS_CACHE_FOLDER: ${{ env.STORE_PATH }}/${{ env.CYPRESS_CACHE_FOLDER_SUFFIX }}
          PLAYWRIGHT_BROWSERS_PATH: ${{ env.STORE_PATH }}/${{ env.PLAYWRIGHT_BROWSERS_CACHE_FOLDER_SUFFIX }}
        run: make deps

      - name: Prepare linting
        run: make lint-prepare

      - name: Lint
        run: make lint

      - name: Format check
        run: make format-check

      - name: Prepare tests
        env:
          CYPRESS_CACHE_FOLDER: ${{ env.STORE_PATH }}/${{ env.CYPRESS_CACHE_FOLDER_SUFFIX }}
          PLAYWRIGHT_BROWSERS_PATH: ${{ env.STORE_PATH }}/${{ env.PLAYWRIGHT_BROWSERS_CACHE_FOLDER_SUFFIX }}
        run: make test-prepare

      - uses: KengoTODA/actions-setup-docker-compose@v1
        name: Install `docker-compose` for local CI/CD simulations (https://github.com/nektos/act/issues/112#issuecomment-1387307297)
        if: ${{ env.ACT }}
        with:
          version: '2.14.2'
      - name: Install `Xvfb` and others to run browsers for end-to-end testing in local CI/CD simulations (https://github.com/nektos/act/issues/1300#issuecomment-1387344639)
        if: ${{ env.ACT }}
        run: sudo apt-get update && sudo apt-get install -y xvfb && npx playwright install-deps

      - name: Get number of CPU cores for the following test step
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Test unit
        env:
          JEST_CACHE_PATH: ${{ env.STORE_PATH }}/${{ env.JEST_CACHE_FOLDER_SUFFIX }}
          JEST_MAX_WORKERS: ${{ steps.cpu-cores.outputs.count }}
        run: make test-unit

      - name: Build
        env:
          SENTRY_URL: ${{ secrets.SENTRY_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_RELEASE_UPLOAD: true
        run: make build

      - name: Test end-to-end
        env:
          CYPRESS_CACHE_FOLDER: ${{ env.STORE_PATH }}/${{ env.CYPRESS_CACHE_FOLDER_SUFFIX }}
          PLAYWRIGHT_BROWSERS_PATH: ${{ env.STORE_PATH }}/${{ env.PLAYWRIGHT_BROWSERS_CACHE_FOLDER_SUFFIX }}
          JEST_MAX_WORKERS: ${{ steps.cpu-cores.outputs.count }}
        run: make test-e2e

      # TODO: enable again once Next 13 with "appDir: true" is compatible with `next export`
      # Ref: https://beta.nextjs.org/docs/app-directory-roadmap#supported-and-planned-features
      # - name: Accessibility with Lighthouse
      #   run: make accessibility
      #   env:
      #     LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Publish to Chromatic
        if: ${{ !github.event.act }}
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
        run: pnpm run chromatic

      # Since using Scalingo as runtime provider, from here GitHub will trigger a webhook to Scalingo
      # so the latter will perform a quick local build to deploy the application on the right environment
      # It's a bit of duplication but Scalingo does not allow bypassing their logic
